
-- SCHEMA
CREATE SCHEMA FACT;

-- COPYING TABLES
SELECT * INTO INFS421DB.FACT.AUTHOR FROM STARTERDB.FACT.AUTHOR;
SELECT * INTO INFS421DB.FACT.BOOK FROM STARTERDB.FACT.BOOK;
SELECT * INTO INFS421DB.FACT.WRITES FROM STARTERDB.FACT.WRITES;

-- PRACTICE PROBLEMS 

-- PROBLEM 1
SELECT BOOK_TITLE, BOOK_COST, BOOK_YEAR
FROM FACT.BOOK;

-- PROBLEM 2
SELECT PAT_FNAME, PAT_LNAME
FROM FACT.PATRON;

-- PROBLEM 3
SELECT CHECK_NUM, CHECK_OUT_DATE, CHECK_DUE_DATE
FROM FACT.CHECKOUT;

--PROBLEM 4
SELECT BOOK_NUM, BOOK_TITLE AS TITLE, BOOK_YEAR AS 'Year Published'
FROM FACT.BOOK;

--PROBLEM 5
SELECT DISTINCT BOOK_YEAR
FROM FACT.BOOK;

--PROBLEM 6
SELECT DISTINCT BOOK_SUBJECT 
FROM FACT.BOOK;

--PROBLEM 7
SELECT PATRON.PAT_ID AS PATRON, BOOK_NUM AS BOOK, DATEDIFF(DAY, CHECK_OUT_DATE, CHECK_IN_DATE) AS 'Days Kept'
FROM FACT.PATRON JOIN FACT.CHECKOUT ON PATRON.PAT_ID = CHECKOUT.PAT_ID;

--PROBLEM 8 
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST AS 'Replacement Cost'
FROM FACT.BOOK;

--PROBLEM 9
SELECT PAT_ID, CONCAT(PAT_FNAME,' ', PAT_LNAME) AS 'Patron Name', PAT_TYPE
FROM FACT.PATRON;

--PROBLEM 10
SELECT BOOK_NUM, CONCAT(BOOK_TITLE,' ', '(', BOOK_YEAR, ')') AS BOOK , BOOK_SUBJECT
FROM FACT.BOOK;

--PROBLEM 11
SELECT DISTINCT FORMAT (CHECK_OUT_DATE, 'MMMM') AS MONTH
FROM FACT.CHECKOUT;

--PROBLEM 12
SELECT AU_LNAME, AU_FNAME, BOOK_NUM
FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID;

--PROBLEM 13 
SELECT AU_ID, WRITES.BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK JOIN FACT.WRITES ON BOOK.BOOK_NUM = WRITES.BOOK_NUM;

--PROBLEM 14
SELECT CONCAT (AU_LNAME,', ', AU_FNAME) AS 'Author Name', BOOK_TITLE, BOOK_YEAR
FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID
JOIN FACT.BOOK ON WRITES.BOOK_NUM = BOOK.BOOK_NUM;

--PROBLEM 15
SELECT CHECK_NUM, BOOK_NUM, CHECKOUT.PAT_ID, FORMAT(CHECK_OUT_DATE, 'MMMM dd, yyyy') AS 'Date Out', CHECK_DUE_DATE AS 'Date Due'
FROM FACT.PATRON JOIN FACT.CHECKOUT ON PATRON.PAT_ID = CHECKOUT.PAT_ID
ORDER BY CHECK_OUT_DATE DESC;

--PROBLEM 16
SELECT BOOK_TITLE, BOOK_YEAR, BOOK_SUBJECT
FROM FACT.BOOK
ORDER BY BOOK_SUBJECT ASC, BOOK_YEAR DESC, BOOK_TITLE ASC;

--PROBLEM 17
SELECT PATRON.PAT_ID, BOOK_NUM, PAT_FNAME, PAT_LNAME, BOOK_TITLE
FROM FACT.PATRON JOIN FACT.BOOK ON PATRON.PAT_ID = BOOK.PAT_ID
ORDER BY PAT_LNAME ASC, BOOK_TITLE ASC;

--PROBLEM 18
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
WHERE BOOK_YEAR = 2017
ORDER BY BOOK_NUM ASC;

--PROBLEM 19
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK 
WHERE BOOK_SUBJECT = 'DATABASE';

--PROBLEM 20
SELECT CHECK_NUM, BOOK_NUM, CHECK_OUT_DATE
FROM FACT.CHECKOUT
WHERE CHECK_OUT_DATE < '2019-04-08';

--PROBLEM 21
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
WHERE BOOK_YEAR > '2017' AND BOOK_SUBJECT = 'Programming';

--PROBLEM 22
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR, BOOK_SUBJECT, BOOK_COST
FROM FACT.BOOK
WHERE (BOOK_SUBJECT = 'Middleware' OR BOOK_SUBJECT = 'Cloud') AND BOOK_COST > '70';

--PROBLEM 23
SELECT AU_ID, AU_FNAME, AU_LNAME, AU_BIRTHYEAR
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR BETWEEN '1980' AND '1989';

--PROBLEM 24
SELECT BOOK_NUM, BOOK_TITLE AS "Title", BOOK_YEAR AS "Year Published"
FROM FACT.BOOK
WHERE BOOK_TITLE LIKE '%Database%';

--PROBLEM 25
SELECT PAT_ID, PAT_FNAME, PAT_LNAME
FROM FACT.PATRON
WHERE PAT_TYPE = 'Student';

--PROBLEM 26
SELECT PAT_ID, PAT_FNAME, PAT_LNAME, PAT_TYPE
FROM FACT.PATRON
WHERE PAT_LNAME LIKE 'C%'

--PROBLEM 27
SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR IS NULL;

--PROBLEM 28
SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR IS NOT NULL
ORDER BY AU_LNAME ASC, AU_FNAME ASC;

--PROBLEM 29
SELECT CHECK_NUM, BOOK_NUM, PAT_ID, CHECK_OUT_DATE, CHECK_DUE_DATE
FROM FACT.CHECKOUT
WHERE CHECK_IN_DATE IS NULL
ORDER BY BOOK_NUM ASC;

--PROBLEM 30
SELECT AU_ID, AU_FNAME, AU_LNAME, AU_BIRTHYEAR
FROM FACT.AUTHOR
ORDER BY AU_BIRTHYEAR DESC, AU_LNAME ASC;

--PROBLEM 31
SELECT PAT_ID, CONCAT(PAT_FNAME,' ',PAT_LNAME) AS 'NAME', PAT_TYPE
FROM FACT.PATRON
ORDER BY PAT_TYPE ASC, PAT_LNAME ASC, PAT_FNAME ASC;

--PROBLEM 32
SELECT COUNT(BOOK_NUM) AS 'Number of Books'
FROM FACT.BOOK

--PROBLEM 33
SELECT COUNT(DISTINCT BOOK_SUBJECT) AS 'Number of SubjectS'
FROM FACT.BOOK;

--PROBLEM 34
SELECT COUNT(BOOK_NUM) AS 'Available Books'
FROM FACT.BOOK
WHERE BOOK.PAT_ID IS NULL;

--PROBLEM 35
SELECT  FORMAT (MAX (BOOK_COST), 'C') AS 'Most Expensive'
FROM FACT.BOOK;

--PROBLEM 36 
SELECT  FORMAT (MIN (BOOK_COST), 'C') AS 'Least Expensive'
FROM FACT.BOOK;

--PROBLEM 37
SELECT COUNT(DISTINCT PAT_ID) AS 'DIFFERENT PATRONS'
FROM FACT.CHECKOUT;

--PROBLEM 38
SELECT BOOK_SUBJECT, COUNT(BOOK_NUM) AS 'Books in Subject'
FROM FACT.BOOK
GROUP BY BOOK_SUBJECT
ORDER BY BOOK_SUBJECT ASC;

--PROBLEM 39
SELECT AU_ID, COUNT(BOOK_NUM) AS 'Books Written'
FROM FACT.WRITES
GROUP BY AU_ID
ORDER BY [Books Written] DESC, AU_ID ASC;

--PROBLEM 40 
SELECT FORMAT(CHECK_OUT_DATE, 'MMMM') AS 'Month', COUNT( CHECK_NUM) AS 'Num Checkouts'
FROM FACT.CHECKOUT
GROUP BY FORMAT(CHECK_OUT_DATE, 'MMMM')
ORDER BY [Num Checkouts] DESC;

--PROBLEM 41
SELECT FORMAT( SUM(BOOK_COST), 'C') AS 'Library Value'
FROM FACT.BOOK;

--PROBLEM 42
SELECT BOOK_NUM, COUNT(CHECK_OUT_DATE) AS 'Times Checked Out'
FROM FACT.CHECKOUT
GROUP BY BOOK_NUM
ORDER BY [Times Checked Out] DESC, BOOK_NUM ASC;

--PROBLEM 43
SELECT AUTHOR.AU_ID, CONCAT(AU_FNAME,' ',AU_LNAME) AS 'AUTHOR NAME', BOOK.BOOK_NUM, BOOK_TITLE
FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID
	 JOIN FACT.BOOK ON WRITES.BOOK_NUM = BOOK.BOOK_NUM
WHERE BOOK_SUBJECT = 'Cloud'
ORDER BY BOOK_TITLE ASC, AU_LNAME ASC;

--PROBLEM 44
SELECT BOOK_NUM, BOOK_TITLE, PATRON.PAT_ID, PAT_LNAME, PAT_TYPE
FROM FACT.PATRON JOIN FACT.BOOK ON PATRON.PAT_ID = BOOK.PAT_ID
ORDER BY BOOK_TITLE ASC;

--PROBLEM 45
SELECT BOOK.BOOK_NUM, BOOK_TITLE, COUNT(CHECK_OUT_DATE) AS 'Times Checked Out'
FROM FACT.CHECKOUT RIGHT JOIN FACT.BOOK ON CHECKOUT.BOOK_NUM = BOOK.BOOK_NUM
GROUP BY BOOK.BOOK_NUM, BOOK_TITLE
ORDER BY [Times Checked Out] DESC, BOOK_TITLE ASC;

--PROBLEM 46
SELECT BOOK.BOOK_NUM, BOOK_TITLE, COUNT(CHECK_OUT_DATE) AS 'Times Checked Out'
FROM FACT.CHECKOUT JOIN FACT.BOOK ON CHECKOUT.BOOK_NUM = BOOK.BOOK_NUM
GROUP BY BOOK.BOOK_NUM, BOOK_TITLE
HAVING COUNT(CHECK_OUT_DATE) > '5'
ORDER BY [Times Checked Out] DESC, BOOK_TITLE ASC;

--PROBLEM 47
SELECT *
FROM(SELECT AUTHOR.Au_ID, Au_FName, Au_LName, COUNT(BOOK.BOOK_NUM) AS 'Books Written', AVG(BOOK_COST) as 'Average Cost'
	FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID
	JOIN FACT.BOOK ON WRITES.BOOK_NUM = BOOK.BOOK_NUM
	GROUP BY AUTHOR.AU_ID, AU_FNAME, AU_LNAME
	HAVING COUNT(BOOK.BOOK_NUM) > 1) AS BOOKCHECK;


--PROBLEM 48
SELECT AUTHOR.AU_ID, AU_LNAME, BOOK_TITLE, CHECK_OUT_DATE, PAT_LNAME
FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID
	JOIN FACT.BOOK ON  WRITES.BOOK_NUM = BOOK.BOOK_NUM
	JOIN FACT.CHECKOUT ON BOOK.BOOK_NUM = CHECKOUT.BOOK_NUM
	JOIN FACT.PATRON ON CHECKOUT.PAT_ID = PATRON.PAT_ID
WHERE AU_LNAME = 'Bruer' AND PAT_LNAME = 'Miles';

--PROBLEM 49
SELECT PATRON.PAT_ID, PAT_FNAME, PAT_LNAME
FROM FACT.PATRON LEFT JOIN FACT.CHECKOUT ON PATRON.PAT_ID = CHECKOUT.PAT_ID
WHERE CHECK_OUT_DATE IS NULL
ORDER BY PAT_LNAME ASC, PAT_FNAME ASC;

--PROBLEM 50
SELECT BOOK.BOOK_NUM, BOOK_TITLE
FROM FACT.BOOK LEFT JOIN FACT.CHECKOUT ON BOOK.BOOK_NUM = CHECKOUT.BOOK_NUM
WHERE CHECKOUT.BOOK_NUM IS NULL
ORDER BY BOOK_TITLE ASC;

--PROBLEM 51
SELECT CHECKOUT.PAT_ID,PAT_LNAME, COUNT(CHECK_NUM) AS 'NUM CHECKOUTS', COUNT (DISTINCT BOOK_NUM) AS 'NUM DIFFERENT BOOKS'
FROM FACT.PATRON JOIN FACT.CHECKOUT ON PATRON.PAT_ID = CHECKOUT.PAT_ID
GROUP BY CHECKOUT.PAT_ID, PAT_LNAME
HAVING COUNT(CHECK_NUM) > 2
ORDER BY [NUM DIFFERENT BOOKS] DESC, [NUM CHECKOUTS] DESC, PAT_ID ASC;

--PROBLEM 52
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST 
FROM FACT.BOOK
WHERE BOOK_COST > (SELECT AVG(BOOK_COST)
					FROM FACT.BOOK)
ORDER BY BOOK_TITLE ASC;

--PROBLEM 53
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST
FROM FACT.BOOK
WHERE BOOK_COST < (SELECT MIN(BOOK_COST)
					FROM FACT.BOOK
					WHERE BOOK_SUBJECT = 'Programming');

--PROBLEM 54
SELECT *
FROM FACT.PATRON
WHERE PATRON.PAT_ID NOT IN (CHECKOUT.PAT_ID)

--PROBLEM 55



--PROBLEM 56

SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_ID NOT IN (SELECT DISTINCT WRITES.AU_ID
					FROM FACT.AUTHOR JOIN FACT.WRITES ON AUTHOR.AU_ID = WRITES.AU_ID
					JOIN FACT.BOOK ON WRITES.BOOK_NUM = BOOK.BOOK_NUM
					WHERE BOOK_SUBJECT = 'Programming')
ORDER BY AU_LNAME ASC;

--PROBLEM 57

